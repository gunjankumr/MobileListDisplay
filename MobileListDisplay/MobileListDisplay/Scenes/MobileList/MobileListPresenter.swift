//
//  MobileListPresenter.swift
//  MobileListDisplay
//
//  Created by Sujeet Sinha on 29/9/18.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MobileListPresentationLogic {
  func presentMobileListFromService(response: MobileList.GetMobileList.Response)
  func presentMobileListWithSorting(response: MobileList.GetSortedMobileList.Response)
  func presentSelectedMobile(response: MobileList.SelectedMobile.Response)
}

class MobileListPresenter: MobileListPresentationLogic {
  weak var viewController: MobileListDisplayLogic?
  let mobileListWorker: MobileListWorker = MobileListWorker()
  // MARK: - Presentation Function
  
  func presentMobileListFromService(response: MobileList.GetMobileList.Response) {
    switch response.result {
    case .success(let mobiles):
      let transformMobile = mobileListWorker.convertMobileDataToModel(mobiles: mobiles)
      let viewModel = MobileList.GetMobileList.ViewModel(result: .success(transformMobile))
      viewController?.displayMobileList(viewModel: viewModel)
      break
    case .failure(let error):
      var apiError: MobileList.GetMobileList.ViewModel.GetMobileServiceError = .serviceError
      switch error {
      case .noRecord:
        apiError = .noRecord
      case .noInternet:
        apiError = .noInternet
      case .serviceError:
        apiError = .serviceError
      }
      
      let viewModel = MobileList.GetMobileList.ViewModel(result: .failure(apiError))
      viewController?.displayMobileList(viewModel: viewModel)
    }
  }
  
  func presentMobileListWithSorting(response: MobileList.GetSortedMobileList.Response) {
    let displayMobiles = mobileListWorker.convertMobileDataToModel(mobiles: response.mobiles)
    let viewModel = MobileList.GetSortedMobileList.ViewModel(mobiles: displayMobiles)
    viewController?.displayMobileListWithSorting(viewModel: viewModel)
  }
  
  func presentSelectedMobile(response: MobileList.SelectedMobile.Response) {
    let viewModel = MobileList.SelectedMobile.ViewModel()
    viewController?.displaySelectedMobile(viewModel: viewModel)
  }
}
